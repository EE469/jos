a. What entries (rows) in the page directory have been filled in at this point? What addresses do they map and where do they point? In other words, fill out this table as much as possible:
        +-----+----------------------+---------------------------------------+
        |Entry| Base Virtual Address |  Points to (logically)                |
        +=====+======================+=======================================+
        |1023 | ?                    | Page table for top 4MB of phys memory |
        +-----+----------------------+---------------------------------------+
        |1022 | ?                    | ?                                     |
        +-----+----------------------+---------------------------------------+
        |.    | ?                    | ?                                     |
        +-----+----------------------+---------------------------------------+
        |.    | ?                    | ?                                     |
        +-----+----------------------+---------------------------------------+
        |.    | ?                    | ?                                     |
        +-----+----------------------+---------------------------------------+
        |2    | 0x00800000           | ?                                     |
        +-----+----------------------+---------------------------------------+
        |1    | 0x00400000           | ?                                     |
        +-----+----------------------+---------------------------------------+
        |0    | 0x00000000           | [see next question]                   |
        +-----+----------------------+---------------------------------------+
    b. We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernelâ€™s memory? What specific mechanisms protect the kernel memory?
        The specific 'permission' flags that are in the MMU give us the ability to control the users access to memory. We did not give
        access to the user on the pages that the kernel uses by keeping the PTE_U bit false, due to this, they will not be able to read or write the kernel's memory.   
    c. What is the maximum amount of physical memory that this operating system can support? Why?
        Total memory is 4k * 1k = 4GB. However, due to design constraints we are able to use only
        256MB of this space. 
    d. How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?
        Overhead Memory = ENTRIES * SIZE = 1024 * 4 = 4096KB
    e. Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?